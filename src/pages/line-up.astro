---
import Layout from "../layouts/Layout.astro";
import { artistListSchema } from "../api";
import PageContainer from "../components/PageContainer.astro";

const artists = await fetch(
  `${import.meta.env.API_SERVER}/api/artists?populate=*`
)
  .then((response) => response.json())
  .then((response) => artistListSchema.parse(response.data));
---

<Layout>
  <PageContainer>
    <h1 class="font-bold">Line-Up</h1>
    {
      artists.map((artist) => (
        <a
          href="#"
          class="artist-info-button underline"
          data-artist-image-url={
            artist.image?.formats.medium
              ? `${import.meta.env.API_SERVER}${artist.image.formats.medium.url}`
              : ""
          }
          data-artist-description={artist.description}
        >
          <h2>{artist.name}</h2>
        </a>
      ))
    }
  </PageContainer>
</Layout>
<dialog id="dialog">
  <form method="dialog">
    <div class="container">
      <img id="dialog-image" />
      <div id="dialog-description" class="text" ></div>
    </div>
  </form>
</dialog>

<script>
  import { marked } from "marked";

  const artistInfoButtons = document.querySelectorAll(".artist-info-button");
  artistInfoButtons.forEach((artistInfoButton) => {
    if (artistInfoButton instanceof HTMLElement) {
      artistInfoButton.addEventListener("click", () => {
        const dialogElement = document.getElementById("dialog");
        const imageElement = document.getElementById("dialog-image");
        if (imageElement instanceof HTMLImageElement) {
          imageElement.src = artistInfoButton.dataset.artistImageUrl ?? "";
        }

        const descriptionElement =
          document.getElementById("dialog-description");
        if (descriptionElement instanceof HTMLDivElement) {
          if (
            artistInfoButton.dataset.artistDescription &&
            typeof artistInfoButton.dataset.artistDescription === "string"
          ) {
            descriptionElement.innerHTML = marked.parse(
              artistInfoButton.dataset.artistDescription,
              { async: false }
            );
          }
        }

        if (dialogElement && dialogElement instanceof HTMLDialogElement) {
          dialogElement.showModal();
          dialogElement.scrollTo(0, 0);
          dialogElement.addEventListener("click", function (event) {
            if (event.target === dialogElement) {
              dialogElement.close();
            }
          });
        }
      });
    }
  });
</script>

<style>
  :modal {
    border-radius: 5px;
    background-color: white;
  }

  dialog {
    margin: auto;
  }

  .text {
  font-size: 20px;
  padding-left: 20px;
}

.container {
  display: flex;
  align-items: center;
  justify-content: center
}
</style>
