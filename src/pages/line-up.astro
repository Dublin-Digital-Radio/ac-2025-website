---
import Layout from "../layouts/Layout.astro";
import { artistListSchema } from "../api";
import PageContainer from "../components/PageContainer.astro";

const artists = await fetch(
  `${import.meta.env.API_SERVER}/api/artists?populate=*`
)
  .then((response) => response.json())
  .then((response) => artistListSchema.parse(response.data))
  .then((list) =>
    list.toSorted((a, b) => {
      if (a.name < b.name) {
        return -1;
      } else {
        return 1;
      }
    })
  );
---

<Layout>
  <PageContainer>
    {
      artists.map((artist) => (
        <div
          style={{
            "--image-url": `url(${import.meta.env.API_SERVER}${artist.image?.formats.medium.url})`,
          }}
          class:list={[
            "py-8 bg-center",
            {
              [`bg-[image:var(--image-url)]`]: Boolean(artist.image),
            },
          ]}
        >
          <a
            id={artist.name}
            href={`#${artist.name}`}
            class="artist-info-button"
            data-artist-name={encodeURIComponent(artist.name)}
            data-artist-image-url={
              artist.image?.formats.medium
                ? `${import.meta.env.API_SERVER}${artist.image.formats.medium.url}`
                : ""
            }
            data-artist-description={artist.description}
          >
            <h2 class="pb-2">
              <span class="p-2 underline underline-offset-4 bg-[#009ee1]">
                {artist.name}
              </span>
            </h2>
          </a>
        </div>
      ))
    }
  </PageContainer>
</Layout>
<dialog id="dialog">
  <form method="dialog">
    <div class="container">
      <img id="dialog-image" class="artist_img" />
      <div id="dialog-description" class="text"></div>
    </div>
  </form>
</dialog>

<script>
  import { marked } from "marked";

  function showArtistInfoModal(name: string) {
    const artistInfoButton = document.querySelectorAll(
      `[data-artist-name='${name}']`
    )[0];

    if (artistInfoButton && artistInfoButton instanceof HTMLElement) {
      window.location.hash = name;
      const dialogElement = document.getElementById("dialog");
      const imageElement = document.getElementById("dialog-image");
      if (imageElement instanceof HTMLImageElement) {
        imageElement.src = artistInfoButton.dataset.artistImageUrl ?? "";
      }

      const descriptionElement = document.getElementById("dialog-description");
      if (descriptionElement instanceof HTMLDivElement) {
        if (
          artistInfoButton.dataset.artistDescription &&
          typeof artistInfoButton.dataset.artistDescription === "string"
        ) {
          descriptionElement.innerHTML = marked.parse(
            artistInfoButton.dataset.artistDescription,
            { async: false }
          );
        }
      }

      if (dialogElement && dialogElement instanceof HTMLDialogElement) {
        dialogElement.showModal();
        dialogElement.scrollTo(0, 0);
        dialogElement.addEventListener("click", function (event) {
          if (event.target === dialogElement) {
            dialogElement.close();
            window.history.replaceState(
              "",
              "",
              window.location.pathname + window.location.search
            );
          }
        });
      }
    }
  }

  const artistInfoButtons = document.querySelectorAll(".artist-info-button");
  artistInfoButtons.forEach((artistInfoButton) => {
    if (artistInfoButton instanceof HTMLElement) {
      artistInfoButton.addEventListener("click", (event) => {
        event.preventDefault();

        if (artistInfoButton.dataset.artistName) {
          showArtistInfoModal(artistInfoButton.dataset.artistName);
        }
      });
    }
  });

  const nameFromRoute = window.location.hash.substring(1);
  if (nameFromRoute) {
    showArtistInfoModal(nameFromRoute);
  }
</script>

<style>
  dialog {
    border-radius: 10px;
    background-color: white;
    width: 50%;
    height: 70%;
    max-width: 800px;
    max-height: 90vh;
    padding: 1rem;
    overflow: auto;
    margin: auto;
    border: none;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
  }

  .container {
    display: flex;
    flex-direction: row;
    gap: 1rem;
    height: 100%;
    overflow: auto;
  }

  .artist_img {
    max-width: 50%;
    height: auto;
    object-fit: contain;
    flex-shrink: 0;
  }

  .text {
    font-size: 1rem;
    line-height: 1.5;
    overflow-y: auto;
    flex: 1;
  }

  @media only screen and (max-width: 600px) {
    .container {
      flex-direction: column;
      align-items: center;
    }

    .artist_img {
      max-width: 100%;
      width: 100%;
    }

    .text {
      font-size: 0.9rem;
      padding-top: 1rem;
    }
  }
</style>
