---
export function getStaticPaths() {
  return [
    { params: { day: "may-1" } },
    { params: { day: "may-2" } },
    { params: { day: "may-3" } },
    { params: { day: "may-4" } },
  ];
}

import { marked } from "marked";
import qs from "qs";
import { DateTime } from "luxon";
import type { z } from "zod";

import { eventListSchema } from "../../api";
import Layout from "../../layouts/Layout.astro";
import PageContainer from "../../components/PageContainer.astro";
import DaySelector from "../../components/DaySelector.astro";
import ArtistInfoModal from "../../components/artist-info-modal/ArtistInfoModal.astro";
import ArtistInfoModalButton from "../../components/artist-info-modal/ArtistInfoModalButton.astro";

import "../../components/artist-info-modal/artist-info-modal.css";

const { day } = Astro.params;

const events = await fetch(
  `${import.meta.env.API_SERVER}/api/events?${qs.stringify({
    populate: {
      artists: {
        populate: "*",
      },
      venue: {
        populate: "*",
      },
    },
    filters: {
      scheduleDay: {
        $eq: day,
      },
    },
  })}`
)
  .then((response) => response.json())
  .then((response) => eventListSchema.parse(response.data));

const venues = Array.from(
  events.reduce((accumulator, current) => {
    accumulator.add(current.venue.name);
    return accumulator;
  }, new Set<string>())
).toSorted();

const eventsByVenue = events.reduce<
  Record<string, z.infer<typeof eventListSchema>>
>((accumulator, current) => {
  return {
    ...accumulator,
    [current.venue.name]: accumulator[current.venue.name]
      ? [...accumulator[current.venue.name], current]
      : [current],
  };
}, {});
---

<Layout>
  <PageContainer>
    <div class="mb-2">
      <DaySelector day={day} />
    </div>
    <div class="mb-4">
      {
        venues.length > 1 ? (
          <>
            <p class="font-bold">Jump to venue:</p>
            <div class="grid grid-cols-2">
              {venues.map((venue) => (
                <div>
                  <a href={`#${venue}`} class="underline">
                    {venue}
                  </a>
                </div>
              ))}
            </div>
          </>
        ) : null
      }
    </div>

    {
      venues.map((venue) => {
        return (
          <section class="mb-4">
            <h2 id={venue} class="mb-2">
              {venue}
            </h2>
            {eventsByVenue[venue].map((event) => (
              <div class="mb-2">
                <h3>{event.name}</h3>
                <h4>
                  {DateTime.fromISO(event.startsAt).toLocaleString(
                    DateTime.TIME_24_SIMPLE
                  )}{" "}
                  -{" "}
                  {DateTime.fromISO(event.endsAt).toLocaleString(
                    DateTime.TIME_24_SIMPLE
                  )}
                </h4>
                <div>
                  Artist(s):{" "}
                  {event.artists.map((artist) => (
                    <ArtistInfoModalButton artist={artist} class="underline">
                      {artist.name}
                    </ArtistInfoModalButton>
                  ))}
                </div>
                {event.description ? (
                  <div set:html={marked.parse(event.description)} />
                ) : null}
              </div>
            ))}
          </section>
        );
      })
    }
  </PageContainer>
</Layout>
<ArtistInfoModal />

<script>
  import { showArtistInfoModal } from "../../components/artist-info-modal/artist-info-modal-controller";

  const artistInfoButtons = document.querySelectorAll(".artist-info-button");
  artistInfoButtons.forEach((artistInfoButton) => {
    if (artistInfoButton instanceof HTMLElement) {
      artistInfoButton.addEventListener("click", (event) => {
        event.preventDefault();

        if (artistInfoButton.dataset.artistName) {
          showArtistInfoModal({
            name: artistInfoButton.dataset.artistName,
            imageUrl: artistInfoButton.dataset.artistImageUrl,
            markdownDescription: artistInfoButton.dataset.artistDescription,
          });
        }
      });
    }
  });
</script>
