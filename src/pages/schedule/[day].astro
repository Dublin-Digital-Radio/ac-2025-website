---
export function getStaticPaths() {
  return [
    { params: { day: "may-1" } },
    { params: { day: "may-2" } },
    { params: { day: "may-3" } },
    { params: { day: "may-4" } },
  ];
}

import { marked } from "marked";
import qs from "qs";
import { DateTime } from "luxon";
import type { z } from "zod";

import {
  artistListSchema,
  eventListSchema,
  radioCultScheduleSchema,
} from "../../api";
import Layout from "../../layouts/Layout.astro";
import PageContainer from "../../components/PageContainer.astro";
import DaySelector from "../../components/DaySelector.astro";
import ArtistInfoModal from "../../components/artist-info-modal/ArtistInfoModal.astro";
import ArtistInfoModalButton from "../../components/artist-info-modal/ArtistInfoModalButton.astro";

import "../../components/artist-info-modal/artist-info-modal.css";

const { day } = Astro.params;

const events = await fetch(
  `${import.meta.env.API_SERVER}/api/events?${qs.stringify({
    populate: {
      artists: {
        populate: "*",
      },
      venue: {
        populate: "*",
      },
    },
    filters: {
      scheduleDay: {
        $eq: day,
      },
    },
  })}`
)
  .then((response) => response.json())
  .then((response) => eventListSchema.parse(response.data));

const venues = Array.from(
  events.reduce((accumulator, current) => {
    accumulator.add(current.venue.name);
    return accumulator;
  }, new Set<string>())
).toSorted();

const eventsByVenue = events.reduce<
  Record<string, z.infer<typeof eventListSchema>>
>((accumulator, current) => {
  return {
    ...accumulator,
    [current.venue.name]: accumulator[current.venue.name]
      ? [...accumulator[current.venue.name], current]
      : [current],
  };
}, {});

let startDateTimestamp;
let endDateTimestamp;
switch (day) {
  case "may-1":
    startDateTimestamp = DateTime.fromISO("2025-05-01").startOf("day").toUTC();
    endDateTimestamp = DateTime.fromISO("2025-05-01").endOf("day").toUTC();
    break;
  case "may-2":
    startDateTimestamp = DateTime.fromISO("2025-05-02").startOf("day").toUTC();
    endDateTimestamp = DateTime.fromISO("2025-05-02").endOf("day").toUTC();
    break;
  case "may-3":
    startDateTimestamp = DateTime.fromISO("2025-05-03").startOf("day").toUTC();
    endDateTimestamp = DateTime.fromISO("2025-05-03").endOf("day").toUTC();
    break;
  case "may-4":
    startDateTimestamp = DateTime.fromISO("2025-05-04").startOf("day").toUTC();
    endDateTimestamp = DateTime.fromISO("2025-05-04").endOf("day").toUTC();
    break;
  default:
    startDateTimestamp = undefined;
    endDateTimestamp = undefined;
}

const onlineBroadcastShows = await fetch(
  `https://api.radiocult.fm/api/station/dublin-digital-radio/schedule?startDate=${startDateTimestamp}&endDate=${endDateTimestamp}`
)
  .then((response) => response.json())
  .then((response) => radioCultScheduleSchema.parse(response))
  .then((response) =>
    response.schedules
      .filter((show) => {
        return show.title.includes("Alternating Current");
      })
      .map((show) => ({
        ...show,
        title: show.title.replace(" ~ Alternating Current", ""),
      }))
      .toSorted((showA, showB) => {
        if (showA.start < showB.start) {
          return -1;
        } else {
          return 1;
        }
      })
  );

const onlineBroadcastArtists = await fetch(
  `${import.meta.env.API_SERVER}/api/artists?${qs.stringify({
    populate: "*",
    filters: {
      name: {
        $in: onlineBroadcastShows.map((show) => show.title),
      },
    },
  })}`
)
  .then((response) => response.json())
  .then((response) => artistListSchema.parse(response.data));
---

<Layout>
  <PageContainer>
    <div class="mb-2">
      <DaySelector day={day} />
    </div>
    <div class="mb-4">
      {
        venues.length > 1 ? (
          <>
            <p class="font-bold text-center">~ Jump to venue ~</p>
            <div class="grid grid-cols-2">
              {venues.map((venue) => (
                <div>
                  <a href={`#${venue}`} class="underline">
                    {venue}
                  </a>
                </div>
              ))}
            </div>
          </>
        ) : null
      }
    </div>

    {
      venues.map((venue) => {
        return (
          <section class="mb-4">
            <h2 id={venue} class="mb-2">
              {venue}
            </h2>
            {eventsByVenue[venue].map((event) => (
              <div class="mb-2">
                <h3>{event.name}</h3>
                <h4>
                  {DateTime.fromISO(event.startsAt).toLocaleString(
                    DateTime.TIME_24_SIMPLE
                  )}{" "}
                  -{" "}
                  {DateTime.fromISO(event.endsAt).toLocaleString(
                    DateTime.TIME_24_SIMPLE
                  )}
                </h4>
                {event.description ? (
                  <div>
                    Contributors ~{" "}
                    {event.artists.map((artist) => (
                      <ArtistInfoModalButton artist={artist} class="underline">
                        {artist.name}
                      </ArtistInfoModalButton>
                    ))}
                  </div>
                ) : null}

                <button
                  class="view-details-button underline"
                  data-event-id={event.id}
                >
                  Info
                </button>
                {/* {event.description ? (
                  <div set:html={marked.parse(event.description)} />
                ) : null} */}
                <div
                  class="event-description-container"
                  data-event-id={event.id}
                  data-event-description={event.description}
                  data-artist-name={event.artists[0].name}
                  data-artist-image-url={
                    event.artists[0].image?.formats.medium
                      ? `${import.meta.env.API_SERVER}${event.artists[0].image.formats.medium.url}`
                      : ""
                  }
                  data-artist-description={event.artists[0].description}
                />
              </div>
            ))}
          </section>
        );
      })
    }
    <section class="mb-4">
      <h2 id="online-broadcasting" class="mb-2">Online Broadcasting</h2>
      <ul>
        {
          onlineBroadcastShows.map((show) => {
            const matchedArtist = onlineBroadcastArtists.find(
              (artist) => artist.name === show.title
            );
            return (
              <li>
                {show.title}{" "}
                {DateTime.fromISO(show.start).toLocaleString(
                  DateTime.TIME_24_SIMPLE
                )}{" "}
                -{" "}
                {DateTime.fromISO(show.end).toLocaleString(
                  DateTime.TIME_24_SIMPLE
                )}
                {matchedArtist && matchedArtist.image?.formats.medium.url ? (
                  <img
                    src={`${import.meta.env.API_SERVER}${matchedArtist.image.formats.medium.url}`}
                  />
                ) : null}
              </li>
            );
          })
        }
      </ul>
    </section>
  </PageContainer>
</Layout>
<ArtistInfoModal />

<script>
  import { marked } from "marked";
  import { showArtistInfoModal } from "../../components/artist-info-modal/artist-info-modal-controller";

  const artistInfoButtons = document.querySelectorAll(".artist-info-button");
  artistInfoButtons.forEach((artistInfoButton) => {
    if (artistInfoButton instanceof HTMLElement) {
      artistInfoButton.addEventListener("click", (event) => {
        event.preventDefault();

        if (artistInfoButton.dataset.artistName) {
          showArtistInfoModal({
            name: artistInfoButton.dataset.artistName,
            imageUrl: artistInfoButton.dataset.artistImageUrl,
            markdownDescription: artistInfoButton.dataset.artistDescription,
          });
        }
      });
    }
  });

  const viewDetailsButtons = document.querySelectorAll(".view-details-button");
  viewDetailsButtons.forEach((viewDetailsButton) => {
    if (viewDetailsButton instanceof HTMLElement) {
      viewDetailsButton.addEventListener("click", (event) => {
        event.preventDefault();

        if (viewDetailsButton.dataset.eventId) {
          document
            .querySelectorAll(`.event-description-container`)
            .forEach((container) => {
              container.innerHTML = "";
            });
          const container = document.querySelectorAll(
            `.event-description-container[data-event-id='${viewDetailsButton.dataset.eventId}']`
          )[0];

          if (container.dataset.eventDescription) {
            container.innerHTML = marked.parse(
              container.dataset.eventDescription
            );
          } else {
            showArtistInfoModal({
              name: container.dataset.artistName,
              imageUrl: container.dataset.artistImageUrl,
              markdownDescription: container.dataset.artistDescription,
            });
          }
        }
      });
    }
  });
</script>
