---
export function getStaticPaths() {
  return [
    { params: { day: "may-1" } },
    { params: { day: "may-2" } },
    { params: { day: "may-3" } },
    { params: { day: "may-4" } },
  ];
}

import qs from "qs";
import { DateTime } from "luxon";
import type { z } from "zod";

import {
  artistListSchema,
  eventListSchema,
  radioCultScheduleSchema,
  type Venue,
} from "../../api";
import Layout from "../../layouts/Layout.astro";
import PageContainer from "../../components/PageContainer.astro";
import DaySelector from "../../components/DaySelector.astro";
import ArtistInfoModal from "../../components/artist-info-modal/ArtistInfoModal.astro";
import EventInfo from "../../components/EventInfo.astro";
import Spacer from "../../components/Spacer.astro";

const { day } = Astro.params;

const onlineBroadcastingVenueName = "Online Broadcasting";

const events = await fetch(
  `${import.meta.env.API_SERVER}/api/events?${qs.stringify({
    populate: {
      artists: {
        populate: "*",
      },
      venue: {
        populate: "*",
      },
    },
    filters: {
      scheduleDay: {
        $eq: day,
      },
    },
  })}`
)
  .then((response) => response.json())
  .then((response) => eventListSchema.parse(response.data));

const eventsByVenue = events.reduce<
  Record<string, z.infer<typeof eventListSchema>>
>((accumulator, current) => {
  if (current.venue) {
    return {
      ...accumulator,
      [current.venue.name]: accumulator[current.venue.name]
        ? [...accumulator[current.venue.name], current]
        : [current],
    };
  } else {
    return accumulator;
  }
}, {});

let startDateTimestamp;
let endDateTimestamp;
switch (day) {
  case "may-1":
    startDateTimestamp = DateTime.fromISO("2025-05-01").startOf("day").toUTC();
    endDateTimestamp = DateTime.fromISO("2025-05-01").endOf("day").toUTC();
    break;
  case "may-2":
    startDateTimestamp = DateTime.fromISO("2025-05-02").startOf("day").toUTC();
    endDateTimestamp = DateTime.fromISO("2025-05-02").endOf("day").toUTC();
    break;
  case "may-3":
    startDateTimestamp = DateTime.fromISO("2025-05-03").startOf("day").toUTC();
    endDateTimestamp = DateTime.fromISO("2025-05-03").endOf("day").toUTC();
    break;
  case "may-4":
    startDateTimestamp = DateTime.fromISO("2025-05-04").startOf("day").toUTC();
    endDateTimestamp = DateTime.fromISO("2025-05-04").endOf("day").toUTC();
    break;
  default:
    startDateTimestamp = undefined;
    endDateTimestamp = undefined;
}

const onlineBroadcastShows = await fetch(
  `https://api.radiocult.fm/api/station/dublin-digital-radio/schedule?startDate=${startDateTimestamp}&endDate=${endDateTimestamp}`
)
  .then((response) => response.json())
  .then((response) => radioCultScheduleSchema.parse(response))
  .then((response) =>
    response.schedules
      .filter((show) => {
        return show.title.includes("Alternating Current");
      })
      .map((show) => ({
        ...show,
        title: show.title.replace(" ~ Alternating Current", ""),
      }))
      .toSorted((showA, showB) => {
        if (showA.start < showB.start) {
          return -1;
        } else {
          return 1;
        }
      })
  );

const onlineBroadcastArtists = await fetch(
  `${import.meta.env.API_SERVER}/api/artists?${qs.stringify({
    populate: "*",
    filters: {
      name: {
        $in: onlineBroadcastShows.map((show) => show.title),
      },
    },
  })}`
)
  .then((response) => response.json())
  .then((response) => artistListSchema.parse(response.data));

const venues = Array.from(
  events.reduce<Venue[]>((accumulator, current) => {
    if (current.venue) {
      if (accumulator.find((venue) => venue.name === current.venue?.name)) {
        return accumulator;
      } else {
        return [...accumulator, current.venue];
      }
    } else {
      return accumulator;
    }
  }, [])
)
  .toSorted((venueA, venueB) => {
    if (venueA.order < venueB.order) {
      return -1;
    } else {
      return 1;
    }
  })
  .concat(
    onlineBroadcastArtists.length > 0
      ? {
          name: onlineBroadcastingVenueName,
          order: 999,
        }
      : []
  );
---

<Layout>
  <PageContainer>
    <div class="mb-2">
      <DaySelector day={day} />
    </div>
    <div class="mb-4">
      {
        venues.length > 1 ? (
          <>
            <p class="font-bold text-center">~ Jump to venue ~</p>
            <div class="grid grid-cols-2">
              {venues.map((venue) => (
                <div>
                  <a href={`#${venue.name}`} class="underline">
                    {venue.name}
                  </a>
                </div>
              ))}
            </div>
          </>
        ) : null
      }
    </div>

    {
      venues.map((venue) => (
        <>
          <section class="mb-4">
            <h2 id={venue.name} class="mb-2">
              {venue.name}
            </h2>
            {venue.name !== onlineBroadcastingVenueName ? (
              <>
                {eventsByVenue[venue.name]
                  .toSorted((eventA, eventB) => {
                    if (eventA.startsAt < eventB.startsAt) {
                      return -1;
                    } else {
                      return 1;
                    }
                  })
                  .map((event) => (
                    <EventInfo event={event} />
                  ))}
              </>
            ) : onlineBroadcastArtists.length > 0 ? (
              <>
                {onlineBroadcastShows.map((show) => {
                  const matchedArtist = onlineBroadcastArtists.find(
                    (artist) => artist.name === show.title
                  );
                  if (!matchedArtist) {
                    return null;
                  }
                  return (
                    <EventInfo
                      event={{
                        id: `online-broadcasting-${matchedArtist.id}`,
                        name: matchedArtist.name,
                        description: null, // Force to use artist description
                        artists: [matchedArtist],
                        startsAt: show.start,
                        endsAt: show.end,
                      }}
                    />
                  );
                })}
              </>
            ) : null}
          </section>
          <Spacer />
        </>
      ))
    }
  </PageContainer>
</Layout>
<ArtistInfoModal />

<script>
  import { showArtistInfoModal } from "../../components/artist-info-modal/artist-info-modal-controller";

  const artistInfoButtons = document.querySelectorAll(".artist-info-button");
  artistInfoButtons.forEach((artistInfoButton) => {
    if (artistInfoButton instanceof HTMLElement) {
      artistInfoButton.addEventListener("click", (event) => {
        event.preventDefault();

        if (artistInfoButton.dataset.artistName) {
          showArtistInfoModal({
            name: artistInfoButton.dataset.artistName,
            imageUrl: artistInfoButton.dataset.artistImageUrl,
            markdownDescription: artistInfoButton.dataset.artistDescription,
          });
        }
      });
    }
  });

  const viewDetailsButtons = document.querySelectorAll(".view-details-button");
  viewDetailsButtons.forEach((viewDetailsButton) => {
    if (viewDetailsButton instanceof HTMLElement) {
      viewDetailsButton.addEventListener("click", (event) => {
        event.preventDefault();

        if (viewDetailsButton.dataset.eventId) {
          const targetContainer = document.querySelectorAll(
            `.event-description-container[data-event-id='${viewDetailsButton.dataset.eventId}']`
          )[0];

          if (targetContainer instanceof HTMLDivElement) {
            if (targetContainer.classList.contains("opacity-0")) {
              targetContainer.classList.remove("opacity-0", "grid-rows-[0fr]");
              targetContainer.classList.add("grid-rows-[1fr]", "opacity-100");
            } else {
              targetContainer.classList.remove(
                "grid-rows-[1fr]",
                "opacity-100"
              );
              targetContainer.classList.add("opacity-0", "grid-rows-[0fr]");
            }
          }

          document
            .querySelectorAll(`.event-description-container`)
            .forEach((container) => {
              if (container !== targetContainer) {
                container.classList.remove("grid-rows-[1fr]", "opacity-100");
                container.classList.add("grid-rows-[0fr]", "opacity-0");
              }
            });
        }
      });
    }
  });
</script>
